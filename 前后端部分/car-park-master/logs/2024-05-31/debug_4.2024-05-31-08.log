[10:35:08:214] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /member/getByCarplate
[10:35:08:359] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:241) - List of Servers for cpm-parkinglots obtained from Discovery client: [192.168.108.1:11000]
[10:35:08:359] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:246) - Filtered List of Servers for cpm-parkinglots obtained from Discovery client: [192.168.108.1:11000]
[10:35:08:359] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-parkinglots]: clearing server list (SET op)
[10:35:08:359] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-parkinglots]:  addServer [192.168.108.1:11000]
[10:35:08:359] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.setServerListForZones(DynamicServerListLoadBalancer.java:179) - Setting server list for zones: {unknown=[192.168.108.1:11000]}
[10:35:08:361] [INFO] - com.netflix.config.ChainedDynamicProperty$ChainLink.checkAndFlip(ChainedDynamicProperty.java:115) - Flipping property: cpm-parkinglots.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[10:35:08:361] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.<init>(BaseLoadBalancer.java:147) - LoadBalancer [cpm-parkinglots_unknown]:  initialized
[10:35:08:371] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-parkinglots_unknown]: clearing server list (SET op)
[10:35:08:371] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-parkinglots_unknown]:  addServer [192.168.108.1:11000]
[10:35:08:471] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,name,type,dayleft,createtime,carplate,basedate,parkinglotid,parkinglot_name,phone FROM member WHERE (carplate = ?)
[10:35:08:481] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 皖A77777(String)
[10:35:08:488] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 1
[10:35:08:552] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: INSERT INTO parking ( parkinglotid, parkinglot_name, memberid, carplate, intime, outtime, status ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
[10:35:08:552] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 2(Integer), 中科大南区停车场(String), 7(Integer), 皖A77777(String), 2024-05-31T10:15:14(LocalDateTime), 2099-12-31T23:59:59(LocalDateTime), 0(Integer)
[10:35:08:558] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==    Updates: 1
[10:35:08:567] [DEBUG] - com.netflix.loadbalancer.ZoneAwareLoadBalancer.chooseServer(ZoneAwareLoadBalancer.java:112) - Zone aware logic disabled or there is only one zone
[10:35:08:567] [DEBUG] - com.netflix.loadbalancer.LoadBalancerContext.getServerFromLoadBalancer(LoadBalancerContext.java:492) - cpm-parkinglots using LB returned Server: 192.168.108.1:11000 for request http:///parkinglots/add
[10:35:08:575] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /parkinglots/add
[10:35:08:578] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: UPDATE parkinglot SET total=?, car_amount=?, left_amount=?, name=?, administrator=?, phone=?, address=? WHERE id=?
[10:35:08:579] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 80(Integer), 22(Integer), 58(Integer), 中科大南区停车场(String), 李四(String), 16666666666(String), 中科大西校区(String), 2(Integer)
[10:35:08:582] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==    Updates: 1
[10:35:08:584] [INFO] - com.ustcsse.parking.service.WebSocketServer.sendOneMessage(WebSocketServer.java:115) - 【websocket消息】 单点消息:[WELCOME]皖A77777,欢迎进入停车场!
[10:35:08:608] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:35:08:610] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:35:08:611] [DEBUG] - io.lettuce.core.RedisChannelHandler.dispatch(RedisChannelHandler.java:179) - dispatching command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:35:08:612] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.channelWriteAndFlush(DefaultEndpoint.java:389) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() writeAndFlush command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:35:08:612] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.write(DefaultEndpoint.java:173) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() done
[10:35:08:614] [DEBUG] - io.lettuce.core.protocol.CommandHandler.write(CommandHandler.java:374) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] write(ctx, AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
[10:35:08:616] [DEBUG] - io.lettuce.core.protocol.CommandEncoder.encode(CommandEncoder.java:101) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379] writing command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:35:08:617] [DEBUG] - io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:570) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Received: 372 bytes, 1 commands in the stack
[10:35:08:617] [DEBUG] - io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:616) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Stack contains: 1 commands
[10:35:08:617] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:131) - Decode LatencyMeteredCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
[10:35:08:617] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:145) - Decoded LatencyMeteredCommand [type=GET, output=ValueOutput [output=[B@34484008, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand], empty stack: true
[10:35:08:623] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /parkinglots/getAll
[10:35:08:625] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,total,car_amount,left_amount,name,administrator,phone,address FROM parkinglot
[10:35:08:625] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 
[10:35:08:628] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 3
[10:35:09:121] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:241) - List of Servers for cpm-member obtained from Discovery client: [192.168.108.1:8000]
[10:35:09:122] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:246) - Filtered List of Servers for cpm-member obtained from Discovery client: [192.168.108.1:8000]
[10:35:09:122] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-member]: clearing server list (SET op)
[10:35:09:122] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-member]:  addServer [192.168.108.1:8000]
[10:35:09:122] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.setServerListForZones(DynamicServerListLoadBalancer.java:179) - Setting server list for zones: {unknown=[192.168.108.1:8000]}
[10:35:09:123] [INFO] - com.netflix.config.ChainedDynamicProperty$ChainLink.checkAndFlip(ChainedDynamicProperty.java:115) - Flipping property: cpm-member.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[10:35:09:123] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.<init>(BaseLoadBalancer.java:147) - LoadBalancer [cpm-member_unknown]:  initialized
[10:35:09:132] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-member_unknown]: clearing server list (SET op)
[10:35:09:132] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-member_unknown]:  addServer [192.168.108.1:8000]
[10:35:37:134] [DEBUG] - org.apache.http.impl.conn.PoolingHttpClientConnectionManager.closeExpiredConnections(PoolingHttpClientConnectionManager.java:448) - Closing expired connections
[10:35:38:112] [DEBUG] - org.apache.http.impl.conn.PoolingHttpClientConnectionManager.closeExpiredConnections(PoolingHttpClientConnectionManager.java:448) - Closing expired connections
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:241) - List of Servers for cpm-parkinglots obtained from Discovery client: [192.168.108.1:11000]
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:246) - Filtered List of Servers for cpm-parkinglots obtained from Discovery client: [192.168.108.1:11000]
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-parkinglots]: clearing server list (SET op)
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-parkinglots]:  addServer [192.168.108.1:11000]
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.setServerListForZones(DynamicServerListLoadBalancer.java:179) - Setting server list for zones: {unknown=[192.168.108.1:11000]}
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-parkinglots_unknown]: clearing server list (SET op)
[10:35:38:373] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-parkinglots_unknown]:  addServer [192.168.108.1:11000]
[10:35:39:135] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:241) - List of Servers for cpm-member obtained from Discovery client: [192.168.108.1:8000]
[10:35:39:135] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:246) - Filtered List of Servers for cpm-member obtained from Discovery client: [192.168.108.1:8000]
[10:35:39:135] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-member]: clearing server list (SET op)
[10:35:39:136] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-member]:  addServer [192.168.108.1:8000]
[10:35:39:136] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.setServerListForZones(DynamicServerListLoadBalancer.java:179) - Setting server list for zones: {unknown=[192.168.108.1:8000]}
[10:35:39:136] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-member_unknown]: clearing server list (SET op)
[10:35:39:136] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-member_unknown]:  addServer [192.168.108.1:8000]
[10:36:06:684] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:36:06:685] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:36:06:686] [DEBUG] - io.lettuce.core.RedisChannelHandler.dispatch(RedisChannelHandler.java:179) - dispatching command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:687] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.channelWriteAndFlush(DefaultEndpoint.java:389) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() writeAndFlush command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:687] [DEBUG] - io.lettuce.core.protocol.CommandHandler.write(CommandHandler.java:374) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] write(ctx, AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
[10:36:06:687] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.write(DefaultEndpoint.java:173) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() done
[10:36:06:688] [DEBUG] - io.lettuce.core.protocol.CommandEncoder.encode(CommandEncoder.java:101) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379] writing command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:692] [DEBUG] - io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:570) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Received: 372 bytes, 1 commands in the stack
[10:36:06:692] [DEBUG] - io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:616) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Stack contains: 1 commands
[10:36:06:693] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:131) - Decode LatencyMeteredCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
[10:36:06:693] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:145) - Decoded LatencyMeteredCommand [type=GET, output=ValueOutput [output=[B@dd2fb14, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand], empty stack: true
[10:36:06:699] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /parking/parkingOut
[10:36:06:704] [DEBUG] - com.netflix.loadbalancer.ZoneAwareLoadBalancer.chooseServer(ZoneAwareLoadBalancer.java:112) - Zone aware logic disabled or there is only one zone
[10:36:06:704] [DEBUG] - com.netflix.loadbalancer.LoadBalancerContext.getServerFromLoadBalancer(LoadBalancerContext.java:492) - cpm-member using LB returned Server: 192.168.108.1:8000 for request http:///member/getByCarplate?carplate=%E7%9A%96A77777
[10:36:06:711] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /member/getByCarplate
[10:36:06:716] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,name,type,dayleft,createtime,carplate,basedate,parkinglotid,parkinglot_name,phone FROM member WHERE (carplate = ?)
[10:36:06:716] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 皖A77777(String)
[10:36:06:721] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 1
[10:36:06:726] [DEBUG] - com.netflix.loadbalancer.ZoneAwareLoadBalancer.chooseServer(ZoneAwareLoadBalancer.java:112) - Zone aware logic disabled or there is only one zone
[10:36:06:727] [DEBUG] - com.netflix.loadbalancer.LoadBalancerContext.getServerFromLoadBalancer(LoadBalancerContext.java:492) - cpm-parkinglots using LB returned Server: 192.168.108.1:11000 for request http:///parkinglots/getByName/%E4%B8%AD%E7%A7%91%E5%A4%A7%E5%8D%97%E5%8C%BA%E5%81%9C%E8%BD%A6%E5%9C%BA
[10:36:06:731] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /parkinglots/getByName/中科大南区停车场
[10:36:06:735] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,total,car_amount,left_amount,name,administrator,phone,address FROM parkinglot WHERE (name = ?)
[10:36:06:736] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 中科大南区停车场(String)
[10:36:06:741] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 1
[10:36:06:749] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,parkinglotid,parkinglot_name,memberid,carplate,intime,outtime,status FROM parking WHERE (carplate = ? AND parkinglot_name = ? AND outtime = ?)
[10:36:06:750] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 皖A77777(String), 中科大南区停车场(String), 2099-12-31T23:59:59(LocalDateTime)
[10:36:06:752] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 1
[10:36:06:768] [INFO] - com.ustcsse.parking.service.WebSocketServer.sendOneMessage(WebSocketServer.java:115) - 【websocket消息】 单点消息:[GOODBYE] 临时停车：皖A77777,免费时段,欢迎驶出！
[10:36:06:795] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:36:06:796] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /auth/check
[10:36:06:797] [DEBUG] - io.lettuce.core.RedisChannelHandler.dispatch(RedisChannelHandler.java:179) - dispatching command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:797] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.channelWriteAndFlush(DefaultEndpoint.java:389) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() writeAndFlush command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:799] [DEBUG] - io.lettuce.core.protocol.DefaultEndpoint.write(DefaultEndpoint.java:173) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, epid=0x2] write() done
[10:36:06:799] [DEBUG] - io.lettuce.core.protocol.CommandHandler.write(CommandHandler.java:374) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] write(ctx, AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
[10:36:06:799] [DEBUG] - io.lettuce.core.protocol.CommandEncoder.encode(CommandEncoder.java:101) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379] writing command AsyncCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
[10:36:06:800] [DEBUG] - io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:570) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Received: 372 bytes, 1 commands in the stack
[10:36:06:800] [DEBUG] - io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:616) - [channel=0x6a7a91cc, /192.168.232.1:58283 -> /192.168.232.130:6379, chid=0x2] Stack contains: 1 commands
[10:36:06:800] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:131) - Decode LatencyMeteredCommand [type=GET, output=ValueOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
[10:36:06:800] [DEBUG] - io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:145) - Decoded LatencyMeteredCommand [type=GET, output=ValueOutput [output=[B@372fad79, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand], empty stack: true
[10:36:06:806] [DEBUG] - springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.lookupHandlerMethod(PropertySourcedRequestMappingHandlerMapping.java:108) - looking up handler for path: /parkinglots/getAll
[10:36:06:807] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==>  Preparing: SELECT id,total,car_amount,left_amount,name,administrator,phone,address FROM parkinglot
[10:36:06:807] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - ==> Parameters: 
[10:36:06:809] [DEBUG] - org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:137) - <==      Total: 3
[10:36:06:860] [DEBUG] - com.netflix.loadbalancer.ZoneAffinityServerListFilter.initWithNiwsConfig(ZoneAffinityServerListFilter.java:83) - ZoneAffinity is set to false
[10:36:06:860] [DEBUG] - com.netflix.loadbalancer.ZoneAffinityServerListFilter.initWithNiwsConfig(ZoneAffinityServerListFilter.java:93) - activeReqeustsPerServerThreshold: 0.6
[10:36:06:860] [DEBUG] - com.netflix.loadbalancer.ZoneAffinityServerListFilter.initWithNiwsConfig(ZoneAffinityServerListFilter.java:95) - blackOutServerPercentageThreshold: 0.8
[10:36:06:861] [DEBUG] - com.netflix.loadbalancer.ZoneAffinityServerListFilter.initWithNiwsConfig(ZoneAffinityServerListFilter.java:97) - availableServersThreshold: 2
[10:36:06:862] [INFO] - com.netflix.config.ChainedDynamicProperty$ChainLink.checkAndFlip(ChainedDynamicProperty.java:115) - Flipping property: cpm-order.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[10:36:06:864] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setPingInterval(BaseLoadBalancer.java:338) - LoadBalancer [cpm-order]:  pingIntervalSeconds set to 30
[10:36:06:865] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setMaxTotalPingTime(BaseLoadBalancer.java:356) - LoadBalancer [cpm-order]: maxTotalPingTime set to 2
[10:36:06:865] [INFO] - com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig(BaseLoadBalancer.java:197) - Client: cpm-order instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=cpm-order,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
[10:36:06:866] [INFO] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature(DynamicServerListLoadBalancer.java:222) - Using serverListUpdater PollingServerListUpdater
[10:36:06:868] [DEBUG] - com.alibaba.nacos.common.notify.DefaultPublisher.notifySubscriber(DefaultPublisher.java:193) - [NotifyCenter] the com.alibaba.nacos.client.naming.event.InstancesChangeEvent@210288df will received by com.alibaba.nacos.client.naming.event.InstancesChangeNotifier@4ff9f715
[10:36:06:871] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:241) - List of Servers for cpm-order obtained from Discovery client: [192.168.108.1:9000]
[10:36:06:871] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.updateListOfServers(DynamicServerListLoadBalancer.java:246) - Filtered List of Servers for cpm-order obtained from Discovery client: [192.168.108.1:9000]
[10:36:06:872] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-order]: clearing server list (SET op)
[10:36:06:872] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-order]:  addServer [192.168.108.1:9000]
[10:36:06:873] [DEBUG] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.setServerListForZones(DynamicServerListLoadBalancer.java:179) - Setting server list for zones: {unknown=[192.168.108.1:9000]}
[10:36:06:874] [INFO] - com.netflix.config.ChainedDynamicProperty$ChainLink.checkAndFlip(ChainedDynamicProperty.java:115) - Flipping property: cpm-order.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[10:36:06:874] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.<init>(BaseLoadBalancer.java:147) - LoadBalancer [cpm-order_unknown]:  initialized
[10:36:06:875] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:491) - LoadBalancer [cpm-order_unknown]: clearing server list (SET op)
[10:36:06:875] [DEBUG] - com.netflix.loadbalancer.BaseLoadBalancer.setServersList(BaseLoadBalancer.java:507) - LoadBalancer [cpm-order_unknown]:  addServer [192.168.108.1:9000]
[10:36:06:876] [INFO] - com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit(DynamicServerListLoadBalancer.java:150) - DynamicServerListLoadBalancer for client cpm-order initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=cpm-order,current list of Servers=[192.168.108.1:9000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.108.1:9000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@1176a19a
[10:36:06:883] [DEBUG] - com.netflix.loadbalancer.ZoneAwareLoadBalancer.chooseServer(ZoneAwareLoadBalancer.java:112) - Zone aware logic disabled or there is only one zone
[10:36:06:883] [DEBUG] - com.netflix.loadbalancer.LoadBalancerContext.getServerFromLoadBalancer(LoadBalancerContext.java:492) - cpm-order using LB returned Server: 192.168.108.1:9000 for request http:///order/add
